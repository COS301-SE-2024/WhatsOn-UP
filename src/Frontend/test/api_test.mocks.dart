// Mocks generated by Mockito 5.4.4 from annotations
// in firstapp/test/api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i8;

import 'package:firstapp/providers/events_providers.dart' as _i5;
import 'package:firstapp/providers/user_provider.dart' as _i9;
import 'package:firstapp/services/api.dart' as _i2;
import 'package:firstapp/widgets/event_card.dart' as _i7;
import 'package:firstapp/widgets/theme_manager.dart' as _i13;
import 'package:flutter/material.dart' as _i4;
import 'package:image_picker/image_picker.dart' as _i12;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApi_0 extends _i1.SmartFake implements _i2.Api {
  _FakeApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_1 extends _i1.SmartFake
    implements _i3.LostDataResponse {
  _FakeLostDataResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeData_2 extends _i1.SmartFake implements _i4.ThemeData {
  _FakeThemeData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [EventProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventProvider extends _i1.Mock implements _i5.EventProvider {
  MockEventProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Api get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeApi_0(
          this,
          Invocation.getter(#api),
        ),
      ) as _i2.Api);

  @override
  set api(_i2.Api? _api) => super.noSuchMethod(
        Invocation.setter(
          #api,
          _api,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<List<_i7.Event>> get eventsHome => (super.noSuchMethod(
        Invocation.getter(#eventsHome),
        returnValue: _i6.Future<List<_i7.Event>>.value(<_i7.Event>[]),
      ) as _i6.Future<List<_i7.Event>>);

  @override
  _i6.Future<List<_i7.Event>> get eventsRsvp => (super.noSuchMethod(
        Invocation.getter(#eventsRsvp),
        returnValue: _i6.Future<List<_i7.Event>>.value(<_i7.Event>[]),
      ) as _i6.Future<List<_i7.Event>>);

  @override
  List<_i7.Event> get eventsSaved => (super.noSuchMethod(
        Invocation.getter(#eventsSaved),
        returnValue: <_i7.Event>[],
      ) as List<_i7.Event>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> refreshEvents() => (super.noSuchMethod(
        Invocation.method(
          #refreshEvents,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> refreshRSVPEvents(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #refreshRSVPEvents,
          [userId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void fetchfortheFirstTimeRsvp(String? userId) => super.noSuchMethod(
        Invocation.method(
          #fetchfortheFirstTimeRsvp,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> addEventHome(Map<String, dynamic>? eventData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEventHome,
          [eventData],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addEventsHome(List<_i7.Event>? events) => super.noSuchMethod(
        Invocation.method(
          #addEventsHome,
          [events],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> removeEventHome(_i7.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #removeEventHome,
          [event],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addEventRSVP(_i7.Event? event) => super.noSuchMethod(
        Invocation.method(
          #addEventRSVP,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addEventsRSVP(List<_i7.Event>? events) => super.noSuchMethod(
        Invocation.method(
          #addEventsRSVP,
          [events],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeEventRSVP(_i7.Event? event) => super.noSuchMethod(
        Invocation.method(
          #removeEventRSVP,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addEventSaved(_i7.Event? event) => super.noSuchMethod(
        Invocation.method(
          #addEventSaved,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeEventSaved(_i7.Event? event) => super.noSuchMethod(
        Invocation.method(
          #removeEventSaved,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i7.Event?> getEventById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [id],
        ),
        returnValue: _i6.Future<_i7.Event?>.value(),
      ) as _i6.Future<_i7.Event?>);

  @override
  _i6.Future<void> EditEventName(
    String? id,
    String? eventName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #EditEventName,
          [
            id,
            eventName,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void EditEventDescription(
    String? id,
    String? Description,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #EditEventDescription,
          [
            id,
            Description,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> EditEventLocation(
    String? id,
    String? Location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #EditEventLocation,
          [
            id,
            Location,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> EditEventMaxParticipants(
    String? id,
    int? maxParticipants,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #EditEventMaxParticipants,
          [
            id,
            maxParticipants,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void EditEventsIsPrivate(
    String? id,
    bool? isPrivate,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #EditEventsIsPrivate,
          [
            id,
            isPrivate,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void EditEventStartTime(
    String? id,
    DateTime? startTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #EditEventStartTime,
          [
            id,
            startTime,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void EditEventEndTime(
    String? id,
    DateTime? endTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #EditEventEndTime,
          [
            id,
            endTime,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [userProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockuserProvider extends _i1.Mock implements _i9.userProvider {
  MockuserProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set profileimage(_i10.Uint8List? _profileimage) => super.noSuchMethod(
        Invocation.setter(
          #profileimage,
          _profileimage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get Fullname => (super.noSuchMethod(
        Invocation.getter(#Fullname),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#Fullname),
        ),
      ) as String);

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#password),
        ),
      ) as String);

  @override
  String get role => (super.noSuchMethod(
        Invocation.getter(#role),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#role),
        ),
      ) as String);

  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
      ) as String);

  @override
  bool get isGuest => (super.noSuchMethod(
        Invocation.getter(#isGuest),
        returnValue: false,
      ) as bool);

  @override
  set Fullname(String? value) => super.noSuchMethod(
        Invocation.setter(
          #Fullname,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set email(String? value) => super.noSuchMethod(
        Invocation.setter(
          #email,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set password(String? value) => super.noSuchMethod(
        Invocation.setter(
          #password,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set profileImage(_i10.Uint8List? value) => super.noSuchMethod(
        Invocation.setter(
          #profileImage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set role(String? value) => super.noSuchMethod(
        Invocation.setter(
          #role,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userId(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isGuest(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isGuest,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setUserData({
    required String? userId,
    required String? fullName,
    required String? email,
    String? password,
    required String? role,
    _i10.Uint8List? profileImage,
    required bool? isGuest,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [],
          {
            #userId: userId,
            #fullName: fullName,
            #email: email,
            #password: password,
            #role: role,
            #profileImage: profileImage,
            #isGuest: isGuest,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setGuestUser() => super.noSuchMethod(
        Invocation.method(
          #setGuestUser,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearUser() => super.noSuchMethod(
        Invocation.method(
          #clearUser,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi extends _i1.Mock implements _i2.Api {
  MockApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get jwtKey => (super.noSuchMethod(
        Invocation.getter(#jwtKey),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#jwtKey),
        ),
      ) as String);

  @override
  set jwtKey(String? _jwtKey) => super.noSuchMethod(
        Invocation.setter(
          #jwtKey,
          _jwtKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get refreshToken => (super.noSuchMethod(
        Invocation.getter(#refreshToken),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#refreshToken),
        ),
      ) as String);

  @override
  set refreshToken(String? _refreshToken) => super.noSuchMethod(
        Invocation.setter(
          #refreshToken,
          _refreshToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<Map<String, dynamic>> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> getUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #getUserDetails,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<List<_i7.Event>> getAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Event>>.value(<_i7.Event>[]),
      ) as _i6.Future<List<_i7.Event>>);

  @override
  _i6.Future<List<_i7.Event>> getAllSavedEvents(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSavedEvents,
          [userId],
        ),
        returnValue: _i6.Future<List<_i7.Event>>.value(<_i7.Event>[]),
      ) as _i6.Future<List<_i7.Event>>);

  @override
  _i6.Future<List<dynamic>> getRSVPEvents(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRSVPEvents,
          [userId],
        ),
        returnValue: _i6.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i6.Future<List<dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> postChangeUser(
    String? name,
    _i10.Uint8List? profileImage,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postChangeUser,
          [
            name,
            profileImage,
            userId,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> updatePassword(
    String? password,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [
            password,
            userId,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> createEvent({
    required String? title,
    required String? description,
    required DateTime? startDate,
    required DateTime? endDate,
    required String? location,
    int? maxParticipants,
    String? metadata,
    bool? isPrivate = false,
    List<String>? media,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [],
          {
            #title: title,
            #description: description,
            #startDate: startDate,
            #endDate: endDate,
            #location: location,
            #maxParticipants: maxParticipants,
            #metadata: metadata,
            #isPrivate: isPrivate,
            #media: media,
            #userId: userId,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> rsvpEvent(
    String? eventId,
    String? UserId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rsvpEvent,
          [
            eventId,
            UserId,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> DeletersvpEvent(
    String? eventId,
    String? UserId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #DeletersvpEvent,
          [
            eventId,
            UserId,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> DeleteEvent(
    String? eventId,
    String? userid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #DeleteEvent,
          [
            eventId,
            userid,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> postUsername(
    String? username,
    String? userid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUsername,
          [
            username,
            userid,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> getUser(String? userid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [userid],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<List<dynamic>> getAllEventsGuest() => (super.noSuchMethod(
        Invocation.method(
          #getAllEventsGuest,
          [],
        ),
        returnValue: _i6.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i6.Future<List<dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> updateEvent({
    required String? userId,
    required String? eventId,
    required String? title,
    required String? description,
    required DateTime? startDate,
    required DateTime? endDate,
    required String? location,
    int? maxParticipants,
    String? metadata,
    bool? isPrivate = false,
    List<String>? media,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [],
          {
            #userId: userId,
            #eventId: eventId,
            #title: title,
            #description: description,
            #startDate: startDate,
            #endDate: endDate,
            #location: location,
            #maxParticipants: maxParticipants,
            #metadata: metadata,
            #isPrivate: isPrivate,
            #media: media,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> applyForHost({
    required String? reason,
    required String? duration,
    required DateTime? fromWhen,
    String? studentEmail,
    _i10.Uint8List? proofImage,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyForHost,
          [],
          {
            #reason: reason,
            #duration: duration,
            #fromWhen: fromWhen,
            #studentEmail: studentEmail,
            #proofImage: proofImage,
            #userId: userId,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i12.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.XFile?> pickImage({
    required _i3.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<List<_i3.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i6.Future<List<_i3.XFile>>);

  @override
  _i6.Future<_i3.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<List<_i3.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i6.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i6.Future<List<_i3.XFile>>);

  @override
  _i6.Future<_i3.XFile?> pickVideo({
    required _i3.ImageSource? source,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i6.Future<_i3.XFile?>.value(),
      ) as _i6.Future<_i3.XFile?>);

  @override
  _i6.Future<_i3.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i6.Future<_i3.LostDataResponse>.value(_FakeLostDataResponse_1(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i6.Future<_i3.LostDataResponse>);

  @override
  bool supportsImageSource(_i3.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ThemeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeNotifier extends _i1.Mock implements _i13.ThemeNotifier {
  MockThemeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ThemeData get lightTheme => (super.noSuchMethod(
        Invocation.getter(#lightTheme),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.getter(#lightTheme),
        ),
      ) as _i4.ThemeData);

  @override
  _i4.ThemeData get darkTheme => (super.noSuchMethod(
        Invocation.getter(#darkTheme),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.getter(#darkTheme),
        ),
      ) as _i4.ThemeData);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.ThemeData getTheme() => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.method(
            #getTheme,
            [],
          ),
        ),
      ) as _i4.ThemeData);

  @override
  void setDarkMode() => super.noSuchMethod(
        Invocation.method(
          #setDarkMode,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLightMode() => super.noSuchMethod(
        Invocation.method(
          #setLightMode,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
