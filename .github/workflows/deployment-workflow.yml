name: Backend Services Deployment Pipeline Fix

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      SPRINGBOOT_ENV: ${{ secrets.SPRINGBOOT_ENV }}
      RECOMMENDATIONS_ENV: ${{ secrets.RECOMMENDATIONS_ENV }}
      NOTIFICATIONS_ENV: ${{ secrets.NOTIFICATIONS_ENV }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v2

      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ env.GCP_SERVICE_ACCOUNT_KEY }}' # Correctly pass JSON here

      - name: 'Set Google Cloud Project'
        run: gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: 'Log in to Docker Hub'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      
      - name: 'Docker Auth'
        run: |
          gcloud auth configure-docker "us-east1-docker.pkg.dev"
      
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.1'
    
      - name: Install dependencies for Frontend
        working-directory: ./src/Frontend
        run: flutter pub get

      - name: 'Run deployment script'
        run: |
          # Create and write environment variables to .env files
          echo "${{ env.SPRINGBOOT_ENV }}" > src/Backend/.env
          echo "${{ env.SPRINGBOOT_ENV }}" > src/Analytics/.env
          echo "${{ env.RECOMMENDATIONS_ENV }}" > src/recommendation-service/.env
          echo "${{ env.NOTIFICATIONS_ENV }}" > src/notification-service/.env
          echo "${{ env.NOTIFICATIONS_ENV }}" > src/storage-service/.env

          # Navigate to the scripts directory and run the deployment script
          cd scripts
          if [ -f "deploy.sh" ]; then
            chmod +x deploy.sh
            ./deploy.sh
          else
            echo "deploy.sh script not found!"
            exit 1
          fi
